{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "Element that allows the user to draw a pie or donut chart for some data.\n\n### Usage\n\n    <px-vis-pie-chart></px-vis-pie-chart>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-pie-empty-color` | The color for an empty pie chart\n  `--px-vis-pie-title-color` | The color for the title name\n  `--px-vis-pie-title-font-size` | The size for the title name\n  `--px-vis-pie-title-value-color` | The color for the title data value\n  `--px-vis-pie-title-value-font-size` | The size for the title data value\n  |\n  |\n  |\n  `--px-vis-series-color-0` | These are the colors used to represent the data series on the charts. Used in numerical order by default. Colors MUST start at 0 and cannot contain gaps between numbers.\n  `--px-vis-series-color-1` |\n  `--px-vis-series-color-2` |\n  `--px-vis-series-color-n` |",
      "summary": "",
      "path": "px-vis-pie-chart.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object | null | undefined",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array | null | undefined",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2202,
              "column": 5
            },
            "end": {
              "line": 2207,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object | null | undefined",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 57,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "chartData",
          "type": "Array | null | undefined",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 390,
              "column": 6
            },
            "end": {
              "line": 392,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "width",
          "type": "number | null | undefined",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 63,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number | null | undefined",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object | null | undefined",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 95,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{\"left\":0,\"right\":0,\"top\":0,\"bottom\":0}",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object | null | undefined",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 110,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{\"left\":0,\"right\":0,\"top\":0,\"bottom\":0}",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array | null | undefined",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 148,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object | null | undefined",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 414,
              "column": 7
            },
            "end": {
              "line": 417,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "seriesColorList",
          "type": "Array",
          "description": "Defines an colors in order that will be used for series.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[\"rgb(0,0,0)\",\"rgb(75,75,75)\",\"rgb(125,125,125)\",\"rgb(200,200,200)\"]",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "xAxisType",
          "type": "string | null | undefined",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains displayed logarithmicly. NOTE: Per d3 docs, this scale cannot cross or include 0.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1099,
              "column": 4
            },
            "end": {
              "line": 1102,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "yAxisType",
          "type": "string | null | undefined",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1113,
              "column": 4
            },
            "end": {
              "line": 1116,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "mutedSeries",
          "type": "Object | null | undefined",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 476,
              "column": 4
            },
            "end": {
              "line": 480,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean | null | undefined",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 487,
              "column": 5
            },
            "end": {
              "line": 490,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "seriesConfig",
          "type": "Object | null | undefined",
          "description": "A configuration file to associate series order, name, type, and colors.\n\nAssociation of name, type, and seriesNumber should be developer set. Color and axis are optional.\n\n```\n {\n    \"seriesKey\": {  //seriesKey is a unique identifier for the configuration\n        \"type\": \"line\",  //line or scatter or both\n        \"priority\": 0, //relative priority is used to decide which series draw on top of each other. priority 0 => smaller priority. 2 draws over 1, which itself draws over 0, etc.. CANVAS ONLY\n        \"markerSymbol\": \"diamond\" //if using scatter different markerSymbol can be used. See \"markerSymbol\" in px-vis-scatter\n        \"markerSize\": \"64\" //if using scatter allows to change the size of markers\n        \"markerScale\": \"2\" //if using scatter allows to scale the size of markers\n        \"markerFillOpacity\": \"0.5\" //if using scatter allows to specify the opacity of the inside of the marker\n        \"markerStrokeOpacity\": \"1\" //if using scatter allows to specify the opacity of the outside of the marker\n        \"strokeWidth\": \"1\" //if using line, allows you to specify the thickness of the line\n        \"mutedOpacity\": \"0.3\" //opacity value to use when muting a serie\n        \"name\": \"My Series\",  //human readable name\n        \"x\": \"x\",  //index or key name for independent variable\n        \"y\": \"y\",  //index or key name for dependent variable\n        \"xAxisUnit\": \"Volt\" //Unit to be used for the X axis. Can be ignored if x axis is time based\n        \"yAxisUnit\": \"Oranges\" //unit to be used for the Y axis.\n        \"xMin\": 0,  // minimum x value\n        \"xMax\": 100,  //maximum x value\n        \"yMin\": 5,  //minimum y value\n        \"yMax\": 50,  //maximum y value\n        \"hideInRegister\": true, //dont show in the register\n        \"color\": \"rgb(0,0,0)\", //color you want for the series\n        \"negativeColor\": \"rgb(255,255,255)\", //color you want negative values of the series to be (not all charts)\n        \"interpolationFunction\": Px.d3.curveBasis, //The line interpretor you want to use. See property 'interpolationFunction'\n        \"axis\": {\n            \"id\": \"AXIS_ID\"   //a unique identifier\n            \"side\": \"left\"    //the side that you want the axis to draw on, `left` or `right`\n            \"number\": 1       //the order of the axis on each side\n         }\n    }\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 127,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_defaultSeriesConfig",
          "type": "Object | null | undefined",
          "description": "A default configuration file. It fills in the missing parts of seriesConfig. Any options from seriesConfig can be specified in the defaultSeriesConfig and will be automatically used if not defined in the seriesConfig\n\nDefault:\n\n```\n {\n    \"type\": \"line\",\n    \"x\": 'x',\n    \"axis\": {\n      \"id\": \"defaultAxis\",\n      \"side\": \"left\",\n      \"number\": 1\n  }}\n```",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 150,
              "column": 6
            },
            "end": {
              "line": 163,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{\"type\":\"line\",\"x\":\"x\",\"axis\":{\"id\":\"defaultAxis\",\"side\":\"left\",\"number\":1}}",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "defaultSeriesConfig",
          "type": "Object | null | undefined",
          "description": "Overwrites to the default configuration file. The defaultSeriesConfig is used to fill in the missing parts of seriesConfig. Any option from seriesConfig can be specified in the defaultSeriesConfig and will be automatically used if not defined in the seriesConfig",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 169,
              "column": 6
            },
            "end": {
              "line": 173,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateDSC\"",
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "includeAllSeries",
          "type": "boolean | null | undefined",
          "description": "A boolean flag on whether to include all the series in the data.\n- `false`: only series defined in the seriesConfig file will be drawn\n- `true`: All series in the dataset will be drawn. Defaults will be used for the seriesConfig. If this is used do not specify a seriesConfig",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 180,
              "column": 6
            },
            "end": {
              "line": 183,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_seriesKeys",
          "type": "Array | null | undefined",
          "description": "Representes the keys avaiable in completeSeriesConfig. It's being set\n before completeSeriesConfig is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 188,
              "column": 6
            },
            "end": {
              "line": 190,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "preventCompleteSeriesConfigCalc",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 192,
              "column": 6
            },
            "end": {
              "line": 195,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_parentResizable",
          "type": "Object | null | undefined",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean | null | undefined",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "preventResize",
          "type": "boolean | null | undefined",
          "description": "whether the pie should resize as window size is adjusted",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 6
            },
            "end": {
              "line": 268,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "chartHorizontalAlignment",
          "type": "string | null | undefined",
          "description": "This allows to decide how the chart\ndrawing will be horizontally aligned when smaller than its container. Values:\n- center\n- left\n- right\n\nif any other value is used then left alignment will be chosen",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 820,
              "column": 6
            },
            "end": {
              "line": 823,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chartVerticalAlignment",
          "type": "string | null | undefined",
          "description": "This allows to decide how the chart\ndrawing will be vertically aligned when smaller than its container. Values:\n- center\n- top\n- bottom\n\nif any other value is used then top alignment will be chosen",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 833,
              "column": 6
            },
            "end": {
              "line": 836,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_chartWrapperClass",
          "type": "string | null | undefined",
          "description": "Class to be used on the external wrapper within the chart",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 840,
              "column": 6
            },
            "end": {
              "line": 843,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "debounceResizeTiming",
          "type": "number | null | undefined",
          "description": "Timing (in ms) to be used for iron resize when the chart auto size\n(preventResize = false)",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 848,
              "column": 6
            },
            "end": {
              "line": 851,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "250",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "hideRegister",
          "type": "boolean | null | undefined",
          "description": "Allows to hide the register",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1089,
              "column": 4
            },
            "end": {
              "line": 1093,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hideRegisterChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.registerPositioning"
        },
        {
          "name": "_registerType",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1094,
              "column": 4
            },
            "end": {
              "line": 1096,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.registerPositioning"
        },
        {
          "name": "_registerWrapperClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1097,
              "column": 4
            },
            "end": {
              "line": 1100,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.registerPositioning"
        },
        {
          "name": "_smallerSide",
          "type": "number | null | undefined",
          "description": "Min between width and height",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1350,
              "column": 5
            },
            "end": {
              "line": 1353,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.circleChart"
        },
        {
          "name": "_diameter",
          "type": "number | null | undefined",
          "description": "diameter of the chart drawing, adjusted with margins",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1357,
              "column": 6
            },
            "end": {
              "line": 1359,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.circleChart"
        },
        {
          "name": "_radius",
          "type": "number | null | undefined",
          "description": "radius of the chart drawing, adjusted with margins",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1363,
              "column": 6
            },
            "end": {
              "line": 1365,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.circleChart"
        },
        {
          "name": "_center",
          "type": "Array | null | undefined",
          "description": "center of the chart, based on radius and margins",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1369,
              "column": 6
            },
            "end": {
              "line": 1371,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.circleChart"
        },
        {
          "name": "_internalCircleMargins",
          "type": "Object | null | undefined",
          "description": "internal margins we can use in addition to \"margin\",\nused to offset chart labels for example",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1376,
              "column": 6
            },
            "end": {
              "line": 1381,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{\"top\":0,\"left\":0,\"right\":0,\"bottom\":0}",
          "inheritedFrom": "PxVisBehaviorChart.circleChart"
        },
        {
          "name": "dynamicMenuConfig",
          "type": "Array | null | undefined",
          "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2032,
              "column": 4
            },
            "end": {
              "line": 2034,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "PxVisBehavior.dynamicMenuConfig"
        },
        {
          "name": "_updateStyles",
          "type": "Function | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3205,
              "column": 4
            },
            "end": {
              "line": 3207,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3208,
              "column": 4
            },
            "end": {
              "line": 3211,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "firstDateTimeFormat",
          "type": "string | null | undefined",
          "description": "Defines the format for the first datetime string. The first datetime is shown in normal font weight.\n\nDefault is the first datetime string is TIME presented as \"15:00:00 +0000\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-datetime.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"HH:mm:ss ZZ\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "secondDateTimeFormat",
          "type": "string | null | undefined",
          "description": "Defines the format for the second datetime string. The second datetime is shown in bold font weight.\n\nDefault is the second datetime string is DATE presented as \"12 Feb 2016\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-datetime.html",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"DD MMM YYYY\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "separator",
          "type": "string | null | undefined",
          "description": "Defines a separator character between the two datetime strings.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-datetime.html",
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"|\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "timezone",
          "type": "string | null | undefined",
          "description": "Sets what timezone the event time should display in.\n\nTimezone defaults to UTC time. If a valid timezone is specified, then times include daylight savings time if applicable.\n\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor more details on timezones, see: http://momentjs.com/timezone/",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-datetime.html",
            "start": {
              "line": 91,
              "column": 4
            },
            "end": {
              "line": 94,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"utc\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "tooltipRequested",
          "type": "boolean | null | undefined",
          "description": "Whether the tooltip should be shown or hidden",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3306,
              "column": 5
            },
            "end": {
              "line": 3309,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "tooltipOrientation",
          "type": "string | null | undefined",
          "description": "Specifies the orientation of the event tooltip.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3316,
              "column": 6
            },
            "end": {
              "line": 3319,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"left\"",
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "resources",
          "type": "Object | null | undefined",
          "description": "List of keys & values used for translating this component.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3324,
              "column": 6
            },
            "end": {
              "line": 3336,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{\"en\":{\"Event\":\"Event\",\"ID\":\"ID\",\"Timestamp\":\"Timestamp\",\"X\":\"X\"}}",
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "useKeyIfMissing",
          "type": "boolean | null | undefined",
          "description": "Use the key for localization if value for language is missing.\nShould always be true for Predix components.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3342,
              "column": 4
            },
            "end": {
              "line": 3345,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "language",
          "type": "string | null | undefined",
          "description": "A valid IETF language tag as a string that will be\nused to localize this component.\n\nSee https://github.com/PolymerElements/app-localize-behavior for API\ndocumentation and more information.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3354,
              "column": 4
            },
            "end": {
              "line": 3357,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"en\"",
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "_availableTooltips",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3367,
              "column": 4
            },
            "end": {
              "line": 3370,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "_usedTooltipMap",
          "type": "Map | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3372,
              "column": 4
            },
            "end": {
              "line": 3375,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Map"
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "_lockedTooltips",
          "type": "Set | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3377,
              "column": 4
            },
            "end": {
              "line": 3380,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Set"
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "registerConfig",
          "type": "Object | null | undefined",
          "description": "Configuration object used to customize the register.\nPlease refer to px-vis-register (URL) for a list of supported proerties.\nMost interesting properties include:\n-width\n-height",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 6
            },
            "end": {
              "line": 193,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_registerConfigChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "showTitle",
          "type": "boolean | null | undefined",
          "description": "Whether to show a title in the middle of the pie/donut with the total value.\nMeant to be used with a donut chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_internalChartData",
          "type": "Array | null | undefined",
          "description": "Internal data used, same as chartData but with percentages infos",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_internalRegisterData",
          "type": "Array | null | undefined",
          "description": "Internal data used for register, depedning on data and max nuymebr of registers",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 6
            },
            "end": {
              "line": 215,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_total",
          "type": "number | null | undefined",
          "description": "Total value of all slices",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 6
            },
            "end": {
              "line": 222,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "donut",
          "type": "boolean | null | undefined",
          "description": "Whether the chart should be disaplyed as a donut rather than a pie.\nIf displayed as a donut it will by default use 30px as the ring size.\nIt can be overriden by using the \"innerRadius\" property (between 0 and 1)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "innerRadius",
          "type": "number | null | undefined",
          "description": "Number between 0 and 1 defining how much of the inner pie should be cut.\nUse it to override default donut ring size. 0 = full chart, 1 no chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "usePercentage",
          "type": "boolean | null | undefined",
          "description": "whether the values should be displayed in %",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 6
            },
            "end": {
              "line": 247,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_empty",
          "type": "boolean | null | undefined",
          "description": "allows to draw an empty pie chart when data is empty/null",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 6
            },
            "end": {
              "line": 254,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "maxRegisters",
          "type": "number | null | undefined",
          "description": "Maximum number of registers the chart can display. 0 = no limit",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 6
            },
            "end": {
              "line": 261,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "decimalPercentage",
          "type": "number | null | undefined",
          "description": "how many digit of number should the percentage show after the decimal point, default is 0 digit.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 6
            },
            "end": {
              "line": 275,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "aggregateOtherRegister",
          "type": "boolean | null | undefined",
          "description": "if using maxRegisters this boolean allows the aggregation of all non-included\nslices in the registers into a \"Other\" register entry",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 6
            },
            "end": {
              "line": 283,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "preserveDataOrder",
          "type": "boolean | null | undefined",
          "description": "By default the pie chart slices will be ordered by value. Set to false\nto keep the data order",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 291,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_colorIndexMapping",
          "type": "Object | null | undefined",
          "description": "Internal mapping used to keep track of each slice color. Key is slice\nname (y) and value is index",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 296,
              "column": 6
            },
            "end": {
              "line": 301,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "preventColorReuse",
          "type": "boolean | null | undefined",
          "description": "By default the chart will try to keep using the same color\nfor the same piece of data when updating data. This can be turned off\nthrough this boolean (typically to \"randomize\" colors when having a\nbig number of ordered slices), with no guarantee whether the updated\ndata will match or not match previous data color per slice",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 6
            },
            "end": {
              "line": 312,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_ttMessage",
          "type": "string | null | undefined",
          "description": "Message used for tooltip and popover, containing info on current slice",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 6
            },
            "end": {
              "line": 320,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "_ttTitle",
          "type": "string | null | undefined",
          "description": "Title used for tooltip and popover, containing info on current slice",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 6
            },
            "end": {
              "line": 328,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "title before the total value if showTitle is true",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 335,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"Total\""
        },
        {
          "name": "titleSpacing",
          "type": "number | null | undefined",
          "description": "the vertical half size, in pixels, for the spacing between the title and its value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 339,
              "column": 6
            },
            "end": {
              "line": 342,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "5"
        },
        {
          "name": "_internalUnits",
          "type": "string | null | undefined",
          "description": "Unit currently in use: unit or %",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 346,
              "column": 6
            },
            "end": {
              "line": 349,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_currentConfig",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 350,
              "column": 6
            },
            "end": {
              "line": 353,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_forceColorsUpdate",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 354,
              "column": 6
            },
            "end": {
              "line": 357,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        }
      ],
      "methods": [
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 68,
              "column": 2
            },
            "end": {
              "line": 87,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 115,
              "column": 2
            },
            "end": {
              "line": 173,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 186,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 221,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 225,
              "column": 2
            },
            "end": {
              "line": 272,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 354,
              "column": 4
            },
            "end": {
              "line": 357,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 362,
              "column": 2
            },
            "end": {
              "line": 365,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 35,
              "column": 2
            },
            "end": {
              "line": 44,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_getColor",
          "description": "Helper function to return the correct color for a particular index.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 229,
              "column": 2
            },
            "end": {
              "line": 234,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "_calcIndex",
          "description": "Helper function to calculate the index. When we run out of indcies, it loops back over valid indicies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 239,
              "column": 2
            },
            "end": {
              "line": 241,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            },
            {
              "name": "l"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "getToolbar",
          "description": "Convenience method for searching for a toolbar in a chart.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 38,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.searchToolbar"
        },
        {
          "name": "_returnAllKeys",
          "description": "Goes through an array of objects and gathers all unique keys. Returns a list of keys\n\nExpects and array of objects\n\nReturns an array of strings",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 61,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommonMethods"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 834,
              "column": 2
            },
            "end": {
              "line": 842,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 850,
              "column": 2
            },
            "end": {
              "line": 855,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 863,
              "column": 2
            },
            "end": {
              "line": 868,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 876,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 887,
              "column": 2
            },
            "end": {
              "line": 899,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 907,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 919,
              "column": 2
            },
            "end": {
              "line": 924,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 929,
              "column": 2
            },
            "end": {
              "line": 931,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 936,
              "column": 2
            },
            "end": {
              "line": 953,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 958,
              "column": 2
            },
            "end": {
              "line": 969,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 974,
              "column": 2
            },
            "end": {
              "line": 992,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 997,
              "column": 2
            },
            "end": {
              "line": 1015,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1017,
              "column": 2
            },
            "end": {
              "line": 1047,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1052,
              "column": 2
            },
            "end": {
              "line": 1065,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1067,
              "column": 2
            },
            "end": {
              "line": 1069,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "muteUnmuteSeries",
          "description": "Method to mute or umute",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 606,
              "column": 2
            },
            "end": {
              "line": 625,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "series"
            },
            {
              "name": "fromRegister"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehavior.muteUnmuteSeries"
        },
        {
          "name": "_isTimeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3420,
              "column": 2
            },
            "end": {
              "line": 3422,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scale"
            }
          ],
          "inheritedFrom": "PxVisBehavior.scaleTypeCheck"
        },
        {
          "name": "_isOrdinalType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3424,
              "column": 2
            },
            "end": {
              "line": 3426,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scale"
            }
          ],
          "inheritedFrom": "PxVisBehavior.scaleTypeCheck"
        },
        {
          "name": "_calcChartExts",
          "description": "Calcs the extents of the charts",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 205,
              "column": 4
            },
            "end": {
              "line": 214,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mins"
            },
            {
              "name": "maxes"
            },
            {
              "name": "axis"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_setCompleteSeriesConfig",
          "description": "Creates the real series confit object based on the default settings, the dev defined series config, and the includeAllSeries flag.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 421,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_sideRegister",
          "description": "Helper function for the register. Returns true if the side register should exist",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 427,
              "column": 4
            },
            "end": {
              "line": 429,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "location"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_topRegister",
          "description": "Helper function for the register. Returns true if the top register should exist",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 435,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "location"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_chartTypeLine",
          "description": "Helper function for the line series. Returns true if the series is a line",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 443,
              "column": 4
            },
            "end": {
              "line": 448,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            },
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_chartTypeScatter",
          "description": "Helper function for the line series. Returns true if the series is a line",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 454,
              "column": 4
            },
            "end": {
              "line": 459,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            },
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_returnKeys",
          "description": "returns the keys of an object",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 465,
              "column": 4
            },
            "end": {
              "line": 467,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_updateDSC",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 469,
              "column": 4
            },
            "end": {
              "line": 483,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dsc"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "getImage",
          "description": "Takes a graphic \"snapshot\" of the component and pass results through a callback:\n- a canvas containing the graphical snapshot\n- a png base 64 data uri\n\ncallback object:\n{\n canvas: theCanvasObject\n image: \"data:image/png;base64;iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACN...\"\n}\n\nthe data uri can be used to save the image and the canvas object to do\nfurther processing, such as combining different elements snapshot into one image",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 639,
              "column": 4
            },
            "end": {
              "line": 710,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            },
            {
              "name": "renderLegend"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_finishGetImage",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 711,
              "column": 4
            },
            "end": {
              "line": 716,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            },
            {
              "name": "canvas"
            },
            {
              "name": "renderLegend"
            },
            {
              "name": "drawingWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_getRegisterWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 717,
              "column": 4
            },
            "end": {
              "line": 751,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "drawingWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_drawRegister",
          "description": "Draws a fake representation of the registers",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 755,
              "column": 4
            },
            "end": {
              "line": 783,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context"
            },
            {
              "name": "startWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3214,
              "column": 2
            },
            "end": {
              "line": 3235,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 390,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "../iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "../iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "../iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "../iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_preventResizeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 854,
              "column": 4
            },
            "end": {
              "line": 862,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_getChartWrapperClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 863,
              "column": 4
            },
            "end": {
              "line": 887,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hor"
            },
            {
              "name": "vert"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_onIronResize",
          "description": "},",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 625,
              "column": 4
            },
            "end": {
              "line": 641,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getHideClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1060,
              "column": 2
            },
            "end": {
              "line": 1068,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hide"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.getHideClass"
        },
        {
          "name": "_getRegisterWrapperClass",
          "description": "determine the flex class on the wrapper depending on where the register is",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1105,
              "column": 2
            },
            "end": {
              "line": 1122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.registerPositioning"
        },
        {
          "name": "_hideRegisterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1123,
              "column": 2
            },
            "end": {
              "line": 1129,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.registerPositioning"
        },
        {
          "name": "_computeSmallerSide",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1386,
              "column": 2
            },
            "end": {
              "line": 1392,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "height"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.circleChart"
        },
        {
          "name": "_sizeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1393,
              "column": 2
            },
            "end": {
              "line": 1441,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_smallerSide"
            },
            {
              "name": "margin"
            },
            {
              "name": "internalMargin"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.circleChart"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 4
            },
            "end": {
              "line": 380,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "syncCSSTheme",
          "description": "Retrieves the CSS style variables set on this element and applies them\nto the appropriate properties, triggering a redraw.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 71,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_debounceSyncCSSTheme",
          "description": "Debounced function call for `syncCSSTheme` method. Loops through available\nstyle variables to apply them to appropriate objects.",
          "privacy": "private",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 108,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_applyStyleVariables",
          "description": "Called when there is at least one style variable applied (the first is\nexpected to be named `--px-vis-series-color-0`). Loops through each\nstyle variable in the format `--px-vis-series-color-[n]` and applies\nthe resulting values and series color order to the element. Stops looping\nthrough style variables when it finds a gap.",
          "privacy": "private",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 165,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_colorHexToRgb",
          "description": "Converts a hex-format color to RGB.",
          "privacy": "private",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 176,
              "column": 4
            },
            "end": {
              "line": 186,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex",
              "type": "String",
              "description": "A color in hex format"
            }
          ],
          "return": {
            "type": "String",
            "desc": "A color in RGB format"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_checkIfDevSetSeriesColorOrder",
          "description": "Compares seriesColorOrder property value to the seriesColorOrder to determine if the dev set their own override.",
          "privacy": "private",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 195,
              "column": 4
            },
            "end": {
              "line": 209,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "true if dev set seriesColorOrder"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_actionRequest",
          "description": "Runs a custom function within the context of the chart",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 2034,
              "column": 2
            },
            "end": {
              "line": 2045,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.actionRequest"
        },
        {
          "name": "_eventRequest",
          "description": "Fires a custom event within the context of the chart",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 2049,
              "column": 2
            },
            "end": {
              "line": 2055,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.actionRequest"
        },
        {
          "name": "formatTimestamp",
          "description": "Method that takes a datetime string, timezone string, and a formatting string. Returns a formated datetime string.",
          "privacy": "public",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-datetime.html",
            "start": {
              "line": 105,
              "column": 2
            },
            "end": {
              "line": 115,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datetime"
            },
            {
              "name": "timezone"
            },
            {
              "name": "format"
            }
          ],
          "return": {
            "type": "formatedDatetimeString"
          },
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "_getTooltipToUse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3398,
              "column": 2
            },
            "end": {
              "line": 3407,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "_createTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3409,
              "column": 2
            },
            "end": {
              "line": 3418,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "_centralTooltipDisplayRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3420,
              "column": 2
            },
            "end": {
              "line": 3447,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "_centralTooltipCancelRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3449,
              "column": 2
            },
            "end": {
              "line": 3465,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "_centralTooltipLockRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3467,
              "column": 2
            },
            "end": {
              "line": 3473,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "_centralTooltipLockCancel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3475,
              "column": 2
            },
            "end": {
              "line": 3480,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "_resizeTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3482,
              "column": 2
            },
            "end": {
              "line": 3486,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "_updateTooltipProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3488,
              "column": 2
            },
            "end": {
              "line": 3510,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "_tooltipConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 391,
              "column": 4
            },
            "end": {
              "line": 395,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "conf"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_registerConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 396,
              "column": 4
            },
            "end": {
              "line": 400,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "conf"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_drawTitle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 402,
              "column": 4
            },
            "end": {
              "line": 454,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getInternalData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 456,
              "column": 4
            },
            "end": {
              "line": 531,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chartData"
            },
            {
              "name": "completeSeriesConfig"
            }
          ]
        },
        {
          "name": "_getInternalRegisterData",
          "description": "Process data for the registers, limiting the max number of registers",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 535,
              "column": 4
            },
            "end": {
              "line": 599,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_internalChartData"
            },
            {
              "name": "maxRegisters"
            },
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "aggregateOtherRegister"
            }
          ]
        },
        {
          "name": "_applyConfigToElement",
          "description": "Applies the config object to the element. Each key in the config object\nis the name of the property to be applied",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 605,
              "column": 4
            },
            "end": {
              "line": 620,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            },
            {
              "name": "element"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_repositionTitle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 642,
              "column": 4
            },
            "end": {
              "line": 644,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getAlignment",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 646,
              "column": 4
            },
            "end": {
              "line": 677,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hor"
            },
            {
              "name": "vert"
            },
            {
              "name": "type"
            }
          ]
        },
        {
          "name": "_showPopover",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 678,
              "column": 4
            },
            "end": {
              "line": 683,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_showTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 684,
              "column": 4
            },
            "end": {
              "line": 700,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_hideTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 701,
              "column": 4
            },
            "end": {
              "line": 703,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_positionChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 704,
              "column": 4
            },
            "end": {
              "line": 708,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeInternalUnits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 709,
              "column": 4
            },
            "end": {
              "line": 715,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getSliceValue",
          "description": "Return the value or the slice datum depending on use of percentages",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 719,
              "column": 4
            },
            "end": {
              "line": 725,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datum"
            }
          ]
        },
        {
          "name": "_computeSeriesId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 726,
              "column": 4
            },
            "end": {
              "line": 730,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            }
          ]
        },
        {
          "name": "_resetColors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 731,
              "column": 4
            },
            "end": {
              "line": 736,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 160,
          "column": 10
        },
        "end": {
          "line": 737,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 57,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 390,
              "column": 6
            },
            "end": {
              "line": 392,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 63,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 110,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 148,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 414,
              "column": 7
            },
            "end": {
              "line": 417,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "series-color-list",
          "description": "Defines an colors in order that will be used for series.",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "x-axis-type",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains displayed logarithmicly. NOTE: Per d3 docs, this scale cannot cross or include 0.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1099,
              "column": 4
            },
            "end": {
              "line": 1102,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1113,
              "column": 4
            },
            "end": {
              "line": 1116,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 476,
              "column": 4
            },
            "end": {
              "line": 480,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 487,
              "column": 5
            },
            "end": {
              "line": 490,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "series-config",
          "description": "A configuration file to associate series order, name, type, and colors.\n\nAssociation of name, type, and seriesNumber should be developer set. Color and axis are optional.\n\n```\n {\n    \"seriesKey\": {  //seriesKey is a unique identifier for the configuration\n        \"type\": \"line\",  //line or scatter or both\n        \"priority\": 0, //relative priority is used to decide which series draw on top of each other. priority 0 => smaller priority. 2 draws over 1, which itself draws over 0, etc.. CANVAS ONLY\n        \"markerSymbol\": \"diamond\" //if using scatter different markerSymbol can be used. See \"markerSymbol\" in px-vis-scatter\n        \"markerSize\": \"64\" //if using scatter allows to change the size of markers\n        \"markerScale\": \"2\" //if using scatter allows to scale the size of markers\n        \"markerFillOpacity\": \"0.5\" //if using scatter allows to specify the opacity of the inside of the marker\n        \"markerStrokeOpacity\": \"1\" //if using scatter allows to specify the opacity of the outside of the marker\n        \"strokeWidth\": \"1\" //if using line, allows you to specify the thickness of the line\n        \"mutedOpacity\": \"0.3\" //opacity value to use when muting a serie\n        \"name\": \"My Series\",  //human readable name\n        \"x\": \"x\",  //index or key name for independent variable\n        \"y\": \"y\",  //index or key name for dependent variable\n        \"xAxisUnit\": \"Volt\" //Unit to be used for the X axis. Can be ignored if x axis is time based\n        \"yAxisUnit\": \"Oranges\" //unit to be used for the Y axis.\n        \"xMin\": 0,  // minimum x value\n        \"xMax\": 100,  //maximum x value\n        \"yMin\": 5,  //minimum y value\n        \"yMax\": 50,  //maximum y value\n        \"hideInRegister\": true, //dont show in the register\n        \"color\": \"rgb(0,0,0)\", //color you want for the series\n        \"negativeColor\": \"rgb(255,255,255)\", //color you want negative values of the series to be (not all charts)\n        \"interpolationFunction\": Px.d3.curveBasis, //The line interpretor you want to use. See property 'interpolationFunction'\n        \"axis\": {\n            \"id\": \"AXIS_ID\"   //a unique identifier\n            \"side\": \"left\"    //the side that you want the axis to draw on, `left` or `right`\n            \"number\": 1       //the order of the axis on each side\n         }\n    }\n }\n```",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 127,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "default-series-config",
          "description": "Overwrites to the default configuration file. The defaultSeriesConfig is used to fill in the missing parts of seriesConfig. Any option from seriesConfig can be specified in the defaultSeriesConfig and will be automatically used if not defined in the seriesConfig",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 169,
              "column": 6
            },
            "end": {
              "line": 173,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "include-all-series",
          "description": "A boolean flag on whether to include all the series in the data.\n- `false`: only series defined in the seriesConfig file will be drawn\n- `true`: All series in the dataset will be drawn. Defaults will be used for the seriesConfig. If this is used do not specify a seriesConfig",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 180,
              "column": 6
            },
            "end": {
              "line": 183,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "prevent-complete-series-config-calc",
          "description": "",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 192,
              "column": 6
            },
            "end": {
              "line": 195,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "prevent-resize",
          "description": "whether the pie should resize as window size is adjusted",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 6
            },
            "end": {
              "line": 268,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "chart-horizontal-alignment",
          "description": "This allows to decide how the chart\ndrawing will be horizontally aligned when smaller than its container. Values:\n- center\n- left\n- right\n\nif any other value is used then left alignment will be chosen",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 820,
              "column": 6
            },
            "end": {
              "line": 823,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chart-vertical-alignment",
          "description": "This allows to decide how the chart\ndrawing will be vertically aligned when smaller than its container. Values:\n- center\n- top\n- bottom\n\nif any other value is used then top alignment will be chosen",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 833,
              "column": 6
            },
            "end": {
              "line": 836,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "debounce-resize-timing",
          "description": "Timing (in ms) to be used for iron resize when the chart auto size\n(preventResize = false)",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 848,
              "column": 6
            },
            "end": {
              "line": 851,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "hide-register",
          "description": "Allows to hide the register",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1089,
              "column": 4
            },
            "end": {
              "line": 1093,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PxVisBehaviorChart.registerPositioning"
        },
        {
          "name": "dynamic-menu-config",
          "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2032,
              "column": 4
            },
            "end": {
              "line": 2034,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "PxVisBehavior.dynamicMenuConfig"
        },
        {
          "name": "first-date-time-format",
          "description": "Defines the format for the first datetime string. The first datetime is shown in normal font weight.\n\nDefault is the first datetime string is TIME presented as \"15:00:00 +0000\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-datetime.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "second-date-time-format",
          "description": "Defines the format for the second datetime string. The second datetime is shown in bold font weight.\n\nDefault is the second datetime string is DATE presented as \"12 Feb 2016\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-datetime.html",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "separator",
          "description": "Defines a separator character between the two datetime strings.",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-datetime.html",
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "timezone",
          "description": "Sets what timezone the event time should display in.\n\nTimezone defaults to UTC time. If a valid timezone is specified, then times include daylight savings time if applicable.\n\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor more details on timezones, see: http://momentjs.com/timezone/",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-datetime.html",
            "start": {
              "line": 91,
              "column": 4
            },
            "end": {
              "line": 94,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "tooltip-requested",
          "description": "Whether the tooltip should be shown or hidden",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3306,
              "column": 5
            },
            "end": {
              "line": 3309,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "tooltip-orientation",
          "description": "Specifies the orientation of the event tooltip.",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3316,
              "column": 6
            },
            "end": {
              "line": 3319,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "resources",
          "description": "List of keys & values used for translating this component.",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3324,
              "column": 6
            },
            "end": {
              "line": 3336,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "use-key-if-missing",
          "description": "Use the key for localization if value for language is missing.\nShould always be true for Predix components.",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3342,
              "column": 4
            },
            "end": {
              "line": 3345,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "language",
          "description": "A valid IETF language tag as a string that will be\nused to localize this component.\n\nSee https://github.com/PolymerElements/app-localize-behavior for API\ndocumentation and more information.",
          "sourceRange": {
            "file": "../px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3354,
              "column": 4
            },
            "end": {
              "line": 3357,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PxVisBehaviorChart.centralTooltip"
        },
        {
          "name": "register-config",
          "description": "Configuration object used to customize the register.\nPlease refer to px-vis-register (URL) for a list of supported proerties.\nMost interesting properties include:\n-width\n-height",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 6
            },
            "end": {
              "line": 193,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "show-title",
          "description": "Whether to show a title in the middle of the pie/donut with the total value.\nMeant to be used with a donut chart",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "donut",
          "description": "Whether the chart should be disaplyed as a donut rather than a pie.\nIf displayed as a donut it will by default use 30px as the ring size.\nIt can be overriden by using the \"innerRadius\" property (between 0 and 1)",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "inner-radius",
          "description": "Number between 0 and 1 defining how much of the inner pie should be cut.\nUse it to override default donut ring size. 0 = full chart, 1 no chart",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "use-percentage",
          "description": "whether the values should be displayed in %",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 6
            },
            "end": {
              "line": 247,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "max-registers",
          "description": "Maximum number of registers the chart can display. 0 = no limit",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 6
            },
            "end": {
              "line": 261,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "decimal-percentage",
          "description": "how many digit of number should the percentage show after the decimal point, default is 0 digit.",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 6
            },
            "end": {
              "line": 275,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "aggregate-other-register",
          "description": "if using maxRegisters this boolean allows the aggregation of all non-included\nslices in the registers into a \"Other\" register entry",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 6
            },
            "end": {
              "line": 283,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "preserve-data-order",
          "description": "By default the pie chart slices will be ordered by value. Set to false\nto keep the data order",
          "sourceRange": {
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 291,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "prevent-color-reuse",
          "description": "By default the chart will try to keep using the same color\nfor the same piece of data when updating data. This can be turned off\nthrough this boolean (typically to \"randomize\" colors when having a\nbig number of ordered slices), with no guarantee whether the updated\ndata will match or not match previous data color per slice",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 6
            },
            "end": {
              "line": 312,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "title",
          "description": "title before the total value if showTitle is true",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 335,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "title-spacing",
          "description": "the vertical half size, in pixels, for the spacing between the title and its value",
          "sourceRange": {
            "start": {
              "line": 339,
              "column": 6
            },
            "end": {
              "line": 342,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-pie-chart"
    }
  ]
}
